{"version":3,"file":"static/js/278.9cc5c866.chunk.js","mappings":"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","sources":["pages/Reversi/rule.js","pages/Reversi/ai.js","pages/Reversi/Square.jsx","pages/Reversi/GameBoard.jsx","pages/Reversi/Header.jsx","pages/Reversi/History.jsx","pages/Reversi/AdvancePanel.jsx","pages/Reversi/ControlPanel.jsx","pages/Reversi/Reversi.jsx"],"sourcesContent":["const DEFAULT_START_PLAYER = \"black\";\r\nconst DEFAULT_BOARD = [\r\n  [null, null, null, null, null, null, null, null],\r\n  [null, null, null, null, null, null, null, null],\r\n  [null, null, null, null, null, null, null, null],\r\n  [null, null, null, \"white-piece\", \"black-piece\", null, null, null],\r\n  [null, null, null, \"black-piece\", \"white-piece\", null, null, null],\r\n  [null, null, null, null, null, null, null, null],\r\n  [null, null, null, null, null, null, null, null],\r\n  [null, null, null, null, null, null, null, null],\r\n];\r\nconst DEFAULT_VALID_BOARD = getValidBoard(\r\n  findValidMoves(DEFAULT_BOARD, DEFAULT_START_PLAYER)\r\n);\r\nconst DEFAULT_PIEACES = countPieces(DEFAULT_BOARD);\r\n\r\nfunction getOpponent(player) {\r\n  return player === \"black\" ? \"white\" : \"black\";\r\n}\r\n\r\nfunction inBound(x, y) {\r\n  return x >= 0 && x < 8 && y >= 0 && y < 8;\r\n}\r\n\r\nfunction findFlankOpponentPieces(board, row, col, player, checkValidMove) {\r\n  const playerPieace = `${player}-piece`;\r\n  const opponentPieace = `${getOpponent(player)}-piece`;\r\n  const flanks = [];\r\n\r\n  // prettier-ignore\r\n  const directions = [\r\n      [-1, -1], [-1, 0], [-1, 1],\r\n      [ 0, -1],          [ 0, 1],\r\n      [ 1, -1], [ 1, 0], [ 1, 1],\r\n    ];\r\n\r\n  directions.forEach((direction) => {\r\n    const [dx, dy] = direction;\r\n    const squaresToFlip = [];\r\n    let x = row + dx;\r\n    let y = col + dy;\r\n\r\n    if (inBound(x, y) && board[x][y] === opponentPieace) {\r\n      while (inBound(x, y)) {\r\n        const square = board[x][y];\r\n        if (square === opponentPieace) {\r\n          squaresToFlip.push([x, y]);\r\n        } else if (square === null) {\r\n          break;\r\n        } else if (square === playerPieace) {\r\n          flanks.push(...squaresToFlip);\r\n          if (checkValidMove) return [flanks];\r\n          else break;\r\n        }\r\n\r\n        x += dx;\r\n        y += dy;\r\n      }\r\n    }\r\n  });\r\n\r\n  return flanks;\r\n}\r\n\r\nconst placePieaces = (board, player, row, col) => {\r\n  board[row][col] = `${player}-piece`;\r\n};\r\n\r\nconst flankOpponentPieces = (board, player, row, col) => {\r\n  const flanks = findFlankOpponentPieces(board, row, col, player);\r\n  flanks.forEach(([row, col]) => {\r\n    board[row][col] = `${player}-piece`;\r\n  });\r\n};\r\n\r\nconst updateBoard = (board, player, row, col) => {\r\n  const newBoard = JSON.parse(JSON.stringify(board));\r\n  placePieaces(newBoard, player, row, col);\r\n  flankOpponentPieces(newBoard, player, row, col);\r\n  return newBoard;\r\n};\r\n\r\nfunction findValidMoves(board, player) {\r\n  const validMoves = [];\r\n\r\n  board.forEach((row, i) => {\r\n    row.forEach((square, j) => {\r\n      if (square === null) {\r\n        const flanks = findFlankOpponentPieces(board, i, j, player, true);\r\n        if (flanks.length > 0) validMoves.push([i, j]);\r\n      }\r\n    });\r\n  });\r\n  return validMoves;\r\n}\r\n\r\nconst isGameOver = (board, validMoves) => {\r\n  const boardFull = board.every((row) =>\r\n    row.every((square) => square !== null)\r\n  );\r\n  const noValidMoves = validMoves.length === 0;\r\n  if (boardFull || noValidMoves) return true;\r\n  else return false;\r\n};\r\n\r\nfunction countPieces(board) {\r\n  let count = { black: 0, white: 0 };\r\n  board.forEach((row) => {\r\n    row.forEach((square) => {\r\n      if (square === \"black-piece\") count.black++;\r\n      else if (square === \"white-piece\") count.white++;\r\n    });\r\n  });\r\n  return count;\r\n}\r\n\r\nfunction getValidBoard(moves) {\r\n  const valid_board = [...Array(8)].map((row) =>\r\n    [...Array(8)].map((column) => false)\r\n  );\r\n  moves.forEach(([row, col]) => (valid_board[row][col] = true));\r\n  return valid_board;\r\n}\r\n\r\nexport {\r\n  DEFAULT_BOARD,\r\n  DEFAULT_START_PLAYER,\r\n  DEFAULT_VALID_BOARD,\r\n  DEFAULT_PIEACES,\r\n  updateBoard,\r\n  findValidMoves,\r\n  isGameOver,\r\n  getValidBoard,\r\n  countPieces,\r\n};\r\n","import { isGameOver, findValidMoves, updateBoard, countPieces } from \"./rule\";\r\n\r\nfunction evaluate(board) {\r\n  const { black, white } = countPieces(board);\r\n  return black - white;\r\n}\r\n\r\nfunction alphaBeta(board, depth, alpha, beta, maximizingPlayer) {\r\n  let possibleMoves = null;\r\n  if (maximizingPlayer) possibleMoves = findValidMoves(board, \"black\");\r\n  else possibleMoves = findValidMoves(board, \"white\");\r\n\r\n  if (depth === 0 || isGameOver(board, possibleMoves)) {\r\n    const score = evaluate(board);\r\n    return score;\r\n  }\r\n\r\n  if (maximizingPlayer) {\r\n    let maxScore = -Infinity;\r\n    for (let move of possibleMoves) {\r\n      const newBoard = updateBoard(board, \"black\", move[0], move[1]);\r\n      const score = alphaBeta(newBoard, depth - 1, alpha, beta, false);\r\n      maxScore = Math.max(maxScore, score);\r\n      alpha = Math.max(alpha, score);\r\n      if (beta <= alpha) {\r\n        break;\r\n      }\r\n    }\r\n    return maxScore;\r\n  } else {\r\n    let minScore = Infinity;\r\n    for (let move of possibleMoves) {\r\n      const newBoard = updateBoard(board, \"white\", move[0], move[1]);\r\n      const score = alphaBeta(newBoard, depth - 1, alpha, beta, true);\r\n      minScore = Math.min(minScore, score);\r\n      beta = Math.min(beta, score);\r\n      if (beta <= alpha) {\r\n        break;\r\n      }\r\n    }\r\n    return minScore;\r\n  }\r\n}\r\n\r\nfunction getBestMove(board, player, depth) {\r\n  const maximize = player === \"black\";\r\n  const possibleMoves = findValidMoves(board, player);\r\n  let bestMove = null;\r\n\r\n  if (maximize) {\r\n    let maxScore = -Infinity;\r\n    possibleMoves.forEach((move) => {\r\n      const newBoard = updateBoard(board, \"black\", move[0], move[1]);\r\n      const score = alphaBeta(newBoard, depth - 1, maxScore, Infinity, false);\r\n      if (score > maxScore) {\r\n        bestMove = move;\r\n        maxScore = score;\r\n      }\r\n    });\r\n    return [bestMove, maxScore];\r\n  } else {\r\n    let minScore = Infinity;\r\n    possibleMoves.forEach((move) => {\r\n      const newBoard = updateBoard(board, \"white\", move[0], move[1]);\r\n      const score = alphaBeta(newBoard, depth - 1, -Infinity, minScore, true);\r\n      if (score < minScore) {\r\n        bestMove = move;\r\n        minScore = score;\r\n      }\r\n    });\r\n    return [bestMove, minScore];\r\n  }\r\n}\r\n\r\nexport { getBestMove };\r\n","import React from \"react\";\r\n\r\nconst Square = ({ piece, handleClick, isValidMove, isPreviousAction }) => {\r\n  return (\r\n    <div\r\n      className={`reversi-square ${\r\n        isPreviousAction ? \"reversi-previous-move\" : \"\"\r\n      } ${isValidMove ? \"reversi-valid-move\" : \"\"}`}\r\n      onClick={handleClick}\r\n    >\r\n      {piece && <div className={`reversi-piece reversi-${piece}`} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Square;\r\n","import React from \"react\";\r\nimport Square from \"./Square\";\r\n\r\nconst GameBoard = ({ board, validBoard, handleClick, previousAction }) => {\r\n  return (\r\n    <div className=\"board\">\r\n      {board.map((row, rowIndex) => (\r\n        <div key={rowIndex}>\r\n          {row.map((square, colIndex) => (\r\n            <Square\r\n              key={colIndex}\r\n              piece={square}\r\n              handleClick={() => handleClick(rowIndex, colIndex)}\r\n              isValidMove={validBoard[rowIndex][colIndex]}\r\n              isPreviousAction={\r\n                previousAction &&\r\n                rowIndex === previousAction.row &&\r\n                colIndex === previousAction.col\r\n              }\r\n            />\r\n          ))}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameBoard;\r\n","import { Typography } from \"@mui/material\";\r\nimport { Stack } from \"@mui/system\";\r\n\r\nfunction Header({ player, piecesNumber }) {\r\n  return (\r\n    <>\r\n      <Stack flexDirection=\"row\" gap={10} mb={1}>\r\n        <div className=\"reversi-piece reversi-black-piece\">\r\n          <Typography color=\"white\" variant=\"h6\">\r\n            {piecesNumber.black}\r\n          </Typography>\r\n        </div>\r\n        <Stack flexDirection=\"row\">\r\n          <Typography variant=\"h5\">Turns:</Typography>\r\n          <span\r\n            className={`reversi-piece reversi-${player}-piece reversi-small`}\r\n          />\r\n        </Stack>\r\n        <div className=\"reversi-piece reversi-white-piece\">\r\n          <Typography variant=\"h6\">{piecesNumber.white}</Typography>\r\n        </div>\r\n      </Stack>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import {\r\n  IconButton,\r\n  List,\r\n  ListItem,\r\n  ListItemButton,\r\n  ListItemIcon,\r\n  Paper,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport KeyboardReturnIcon from \"@mui/icons-material/KeyboardReturn\";\r\nimport RemoveRedEyeIcon from \"@mui/icons-material/RemoveRedEye\";\r\nimport UndoIcon from \"@mui/icons-material/Undo\";\r\nimport RedoIcon from \"@mui/icons-material/Redo\";\r\nimport { Stack } from \"@mui/system\";\r\n\r\nfunction History({ history, view, viewHistory }) {\r\n  const undo = () => {\r\n    viewHistory(view + 1);\r\n  };\r\n\r\n  const redo = () => {\r\n    viewHistory(view - 1);\r\n  };\r\n\r\n  return (\r\n    <Paper variant=\"outlined\" sx={{ p: 2 }}>\r\n      <Stack direction=\"row\" gap={2}>\r\n        <IconButton\r\n          size=\"small\"\r\n          onClick={undo}\r\n          disabled={view === history.length - 1}\r\n        >\r\n          <UndoIcon fontSize=\"small\" />\r\n        </IconButton>\r\n        <Typography variant=\"h6\">History</Typography>\r\n        <IconButton\r\n          size=\"small\"\r\n          onClick={redo}\r\n          disabled={view === -1 || view === 0}\r\n        >\r\n          <RedoIcon fontSize=\"small\" />\r\n        </IconButton>\r\n      </Stack>\r\n      <List\r\n        sx={{\r\n          overflow: \"auto\",\r\n          maxHeight: 300,\r\n        }}\r\n      >\r\n        {history.map((state, index) => (\r\n          <ListItem\r\n            key={index}\r\n            disablePadding\r\n            secondaryAction={\r\n              index === view ? (\r\n                <IconButton size=\"small\" disabled>\r\n                  <RemoveRedEyeIcon fontSize=\"small\" />\r\n                </IconButton>\r\n              ) : (\r\n                <IconButton size=\"small\" disableRipple>\r\n                  <KeyboardReturnIcon fontSize=\"small\" />\r\n                </IconButton>\r\n              )\r\n            }\r\n          >\r\n            <ListItemButton\r\n              onClick={() => viewHistory(index)}\r\n              selected={index === view}\r\n            >\r\n              <ListItemIcon>\r\n                <span\r\n                  className={`reversi-piece reversi-${state.action.player}-piece reversi-tiny`}\r\n                />\r\n              </ListItemIcon>\r\n              <Typography key={index} variant=\"subtitle\">\r\n                {state.action.row}, {state.action.col}\r\n              </Typography>\r\n            </ListItemButton>\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n    </Paper>\r\n  );\r\n}\r\n\r\nexport default History;\r\n","import { Divider, Paper, Slider, Typography } from \"@mui/material\";\r\n\r\nconst minDeepth = 1;\r\nconst maxDeepth = 15;\r\n\r\nfunction InfoPanel({ predict, treeDeepth, handleDeepthChange }) {\r\n  return (\r\n    <Paper variant=\"outlined\" sx={{ width: 350, p: 1.5, mt: 1, mb: 1 }}>\r\n      {predict !== null && predict.score === 0 && (\r\n        <Typography>Prediciton: Draw</Typography>\r\n      )}\r\n      {predict !== null && predict.score !== 0 && (\r\n        <Typography\r\n          sx={{\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          Prediciton:\r\n          <span\r\n            className={`reversi-tiny reversi-piece reversi-${\r\n              predict.score > 0 ? \"black\" : \"white\"\r\n            }-piece`}\r\n          />\r\n          win {Math.abs(predict.score)} pieces after {predict.treeDeepth} moves\r\n        </Typography>\r\n      )}\r\n      {predict !== null && (\r\n        <>\r\n          <Typography>Running time: {predict.time / 1000} s</Typography>\r\n          <Divider sx={{ mt: 1 }} />\r\n        </>\r\n      )}\r\n      <Typography mt={1}>AI Predict Moves:</Typography>\r\n      <Slider\r\n        valueLabelDisplay=\"off\"\r\n        min={minDeepth}\r\n        max={maxDeepth}\r\n        marks={[{ label: treeDeepth, value: treeDeepth }]}\r\n        value={treeDeepth}\r\n        onChange={(e) => handleDeepthChange(e.target.value)}\r\n      ></Slider>\r\n    </Paper>\r\n  );\r\n}\r\n\r\nexport default InfoPanel;\r\n","import {\r\n  Button,\r\n  Checkbox,\r\n  IconButton,\r\n  Menu,\r\n  MenuItem,\r\n  Stack,\r\n} from \"@mui/material\";\r\nimport { findValidMoves } from \"./rule\";\r\nimport SettingsIcon from \"@mui/icons-material/Settings\";\r\nimport { useState } from \"react\";\r\n\r\nfunction ControlPanel({\r\n  newGame,\r\n  aiMove,\r\n  history,\r\n  gameState,\r\n  openAdvance,\r\n  toogleAdvance,\r\n}) {\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n  const handleAdvanceSetting = () => {\r\n    toogleAdvance();\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  return (\r\n    <Stack flexDirection=\"row\" gap={2} sx={{ mt: 2, mb: 1 }}>\r\n      <Button\r\n        onClick={newGame}\r\n        variant=\"outlined\"\r\n        disabled={history.length === 0}\r\n      >\r\n        New Game\r\n      </Button>\r\n      <Button\r\n        onClick={aiMove}\r\n        variant=\"outlined\"\r\n        color=\"secondary\"\r\n        disabled={\r\n          findValidMoves(gameState.board, gameState.player).length === 0\r\n        }\r\n      >\r\n        AI play\r\n      </Button>\r\n      <IconButton onClick={(e) => setAnchorEl(e.target)}>\r\n        <SettingsIcon />\r\n      </IconButton>\r\n      <Menu\r\n        anchorEl={anchorEl}\r\n        open={Boolean(anchorEl)}\r\n        onClose={() => setAnchorEl(null)}\r\n      >\r\n        <MenuItem onClick={handleAdvanceSetting}>\r\n          Advance Setting <Checkbox disabled checked={openAdvance} />\r\n        </MenuItem>\r\n      </Menu>\r\n    </Stack>\r\n  );\r\n}\r\n\r\nexport default ControlPanel;\r\n","import { Box, Grid } from \"@mui/material\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { getBestMove } from \"./ai\";\r\nimport GameBoard from \"./GameBoard\";\r\nimport Header from \"./Header\";\r\nimport History from \"./History\";\r\nimport AdvancePanel from \"./AdvancePanel\";\r\nimport {\r\n  countPieces,\r\n  DEFAULT_BOARD,\r\n  DEFAULT_START_PLAYER,\r\n  DEFAULT_VALID_BOARD,\r\n  DEFAULT_PIEACES,\r\n  findValidMoves,\r\n  updateBoard,\r\n  getValidBoard,\r\n} from \"./rule\";\r\nimport ControlPanel from \"./ControlPanel\";\r\n\r\nfunction Reversi() {\r\n  const [gameState, setGameState] = useState({\r\n    board: DEFAULT_BOARD,\r\n    player: DEFAULT_START_PLAYER,\r\n  });\r\n  const [validBoard, setValidBoard] = useState(DEFAULT_VALID_BOARD);\r\n  const [piecesNumber, setPiecesNumber] = useState(DEFAULT_PIEACES);\r\n  const [history, setHistory] = useState([]);\r\n  const [view, setView] = useState(-1);\r\n  const [predict, setPredict] = useState(null);\r\n  const [treeDeepth, setTreeDeepth] = useState(8);\r\n  const [openAdvance, setOpenAdvance] = useState(false);\r\n\r\n  const handleClick = (row, col, isAI) => {\r\n    const empty = Boolean(!gameState.board[row][col]);\r\n    if (empty && validBoard[row][col]) {\r\n      const newBoard = updateBoard(gameState.board, gameState.player, row, col);\r\n      const nextPlayer = gameState.player === \"black\" ? \"white\" : \"black\";\r\n      const newGameState = { board: newBoard, player: nextPlayer };\r\n      if (!isAI) setPredict(null);\r\n      updateHistory(newGameState, gameState.player, row, col);\r\n      setGameState(newGameState);\r\n    }\r\n  };\r\n\r\n  const newGame = () => {\r\n    setGameState({\r\n      board: DEFAULT_BOARD,\r\n      player: DEFAULT_START_PLAYER,\r\n    });\r\n    setHistory([]);\r\n    setView(-1);\r\n  };\r\n\r\n  const aiMove = () => {\r\n    const start = new Date();\r\n    const [move, score] = getBestMove(\r\n      gameState.board,\r\n      gameState.player,\r\n      treeDeepth\r\n    );\r\n    const time = new Date() - start;\r\n    setPredict({ score, treeDeepth, time });\r\n    handleClick(move[0], move[1], true);\r\n  };\r\n\r\n  const updateHistory = (gameState, player, row, col) => {\r\n    const action = { player, row, col };\r\n    const record = { gameState, action };\r\n    if (view === -1) setHistory([record]);\r\n    else setHistory([record, ...history.slice(view)]);\r\n    setView(0);\r\n  };\r\n\r\n  const viewHistory = (index) => {\r\n    setView(index);\r\n    setGameState(history[index].gameState);\r\n  };\r\n\r\n  const handleDeepthChange = (value) => {\r\n    setTreeDeepth(value);\r\n  };\r\n\r\n  const toogleAdvance = () => setOpenAdvance((prev) => !prev);\r\n\r\n  useEffect(() => {\r\n    const validMoves = findValidMoves(gameState.board, gameState.player);\r\n    setValidBoard(getValidBoard(validMoves));\r\n    setPiecesNumber(countPieces(gameState.board));\r\n  }, [gameState]);\r\n\r\n  return (\r\n    <Box p={2} display=\"flex\" alignItems=\"center\" flexDirection=\"column\">\r\n      <Header player={gameState.player} piecesNumber={piecesNumber} />\r\n      <Grid container maxWidth=\"sm\" mt={2}>\r\n        <Grid\r\n          item\r\n          xs={12}\r\n          md={8}\r\n          display=\"flex\"\r\n          flexDirection=\"column\"\r\n          alignItems=\"center\"\r\n        >\r\n          <GameBoard\r\n            board={gameState.board}\r\n            validBoard={validBoard}\r\n            handleClick={handleClick}\r\n            previousAction={view !== -1 && history[view].action}\r\n          />\r\n          <ControlPanel\r\n            newGame={newGame}\r\n            aiMove={aiMove}\r\n            openAdvance={openAdvance}\r\n            toogleAdvance={toogleAdvance}\r\n            history={history}\r\n            gameState={gameState}\r\n          />\r\n          {openAdvance && (\r\n            <AdvancePanel\r\n              predict={predict}\r\n              treeDeepth={treeDeepth}\r\n              handleDeepthChange={handleDeepthChange}\r\n            />\r\n          )}\r\n        </Grid>\r\n        <Grid item xs={12} md={4}>\r\n          <History history={history} view={view} viewHistory={viewHistory} />\r\n        </Grid>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default Reversi;\r\n"],"names":["DEFAULT_START_PLAYER","DEFAULT_BOARD","DEFAULT_VALID_BOARD","getValidBoard","findValidMoves","DEFAULT_PIEACES","countPieces","inBound","x","y","findFlankOpponentPieces","board","row","col","player","checkValidMove","playerPieace","concat","opponentPieace","getOpponent","flanks","forEach","direction","_direction","_slicedToArray","dx","dy","squaresToFlip","square","push","apply","updateBoard","newBoard","JSON","parse","stringify","placePieaces","_ref","_ref2","flankOpponentPieces","validMoves","i","j","length","isGameOver","boardFull","every","noValidMoves","count","black","white","moves","valid_board","_toConsumableArray","Array","map","column","_ref3","_ref4","alphaBeta","depth","alpha","beta","maximizingPlayer","possibleMoves","score","_countPieces","evaluate","_step","maxScore","Infinity","_iterator","_createForOfIteratorHelper","s","n","done","move","value","Math","max","err","e","f","_step2","minScore","_iterator2","min","piece","handleClick","isValidMove","isPreviousAction","_jsx","className","onClick","children","validBoard","previousAction","rowIndex","colIndex","Square","piecesNumber","_Fragment","_jsxs","Stack","flexDirection","gap","mb","Typography","color","variant","history","view","viewHistory","Paper","sx","p","IconButton","size","disabled","UndoIcon","fontSize","RedoIcon","List","overflow","maxHeight","state","index","ListItem","disablePadding","secondaryAction","RemoveRedEyeIcon","disableRipple","KeyboardReturnIcon","ListItemButton","selected","ListItemIcon","action","minDeepth","maxDeepth","predict","treeDeepth","handleDeepthChange","width","mt","display","alignItems","abs","time","Divider","Slider","valueLabelDisplay","marks","label","onChange","target","newGame","aiMove","gameState","openAdvance","toogleAdvance","_useState","useState","_useState2","anchorEl","setAnchorEl","Button","SettingsIcon","Menu","open","Boolean","onClose","MenuItem","Checkbox","checked","setGameState","_useState3","_useState4","setValidBoard","_useState5","_useState6","setPiecesNumber","_useState7","_useState8","setHistory","_useState9","_useState10","setView","_useState11","_useState12","setPredict","_useState13","_useState14","setTreeDeepth","_useState15","_useState16","setOpenAdvance","isAI","newGameState","updateHistory","record","slice","useEffect","Box","Header","Grid","container","maxWidth","item","xs","md","GameBoard","ControlPanel","start","Date","_getBestMove","maximize","bestMove","getBestMove","_getBestMove2","prev","AdvancePanel","History"],"sourceRoot":""}